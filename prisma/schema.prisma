generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Tutor {
  id             Int        @id @default(autoincrement())
  name           String
  email          String
  rate           Float
  commission     Float
  school         String
  program        String
  join_date      DateTime
  balance        Float      @default(0.0)
  bio            String
  hours_taught   Float
  last_login     DateTime
  profile_picture String
  active         Boolean
  reviews        Review[]
  tutorStudents  TutorStudent[]
  tutorSubjects  TutorSubject[]
}

model Review {
  id          Int      @id @default(autoincrement())
  student_id  Int
  tutor_id    Int
  description String
  stars       Int
  student     Student  @relation(fields: [student_id], references: [id])
  tutor       Tutor    @relation(fields: [tutor_id], references: [id])
}

model Student {
  id             Int       @id @default(autoincrement())
  name           String
  email          String
  school         String
  grade          Int
  join_date      DateTime
  parent_id      Int
  balance        Float     @default(0.0)
  last_login     DateTime
  profile_picture String
  active         Boolean
  reviews        Review[]
  tutorStudents  TutorStudent[]
  parent         Parent    @relation(fields: [parent_id], references: [id])
}

model Parent {
  id          Int       @id @default(autoincrement())
  name        String
  email       String
  balance     Float     @default(0.0)
  last_login  DateTime
  active      Boolean
  students    Student[]
}

model TutorStudent {
  student_id Int
  tutor_id   Int
  student    Student @relation(fields: [student_id], references: [id])
  tutor      Tutor   @relation(fields: [tutor_id], references: [id])
  @@id([student_id, tutor_id])
}

model Subject {
  id      Int    @id @default(autoincrement())
  name    String
  grade   Int
  tutorSubjects TutorSubject[]
}

model TutorSubject {
  tutor_id   Int
  subject_id Int
  tutor      Tutor   @relation(fields: [tutor_id], references: [id])
  subject    Subject @relation(fields: [subject_id], references: [id])
  @@id([tutor_id, subject_id])
}

// NextAuth.js models

model User {
  id            Int              @id @default(autoincrement())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                Int       @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token       String?
  user              User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime
}