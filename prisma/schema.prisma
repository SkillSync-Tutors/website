generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    // "TUTOR" or "STUDENT"
  tutor         Tutor?
  student       Student?
  accounts      Account[]
  sessions      Session[]
}

model Tutor {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
  rate         Float
  bio          String?
  hoursTaught  Float    @default(0)
  subjects     Subject[]
  students     Student[]
}

model Student {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  user              User     @relation(fields: [userId], references: [id])
  grade             Int
  goalsAndObjectives String?
  tutoringPreference String  // "IN_PERSON" or "ONLINE" or "BOTH"
  tutors            Tutor[]
  subjects          Subject[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  tutors   Tutor[]
  students Student[]
}

// NextAuth.js models

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}